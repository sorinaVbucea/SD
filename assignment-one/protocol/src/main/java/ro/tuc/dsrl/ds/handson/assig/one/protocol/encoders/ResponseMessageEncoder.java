package ro.tuc.dsrl.ds.handson.assig.one.protocol.encoders;

import ro.tuc.dsrl.ds.handson.assig.one.protocol.enums.StatusCode;
import ro.tuc.dsrl.ds.handson.assig.one.protocol.message.ResponseMessage;

/**
 * @Author: Technical University of Cluj-Napoca, Romania
 *          Distributed Systems, http://dsrl.coned.utcluj.ro/
 * @Module: assignment-one-client
 * @Since: Sep 1, 2015
 * @Description:
 * 	Provides static methods for encoding and decoding ResponseMessages, according
 * 	to the communication protocol.
 *
 * 	The format is:
 * 	    STATUSCODE_BODY
 * 	where STATUSCODE specifies the status generated by the server when processing the request,
 * 	and BODY can contain a string message/object.
 *
 * 	STATUSCODE is one of the codes specified in StatusCode enum.
 * 	BODY can also be empty.
 */
public class ResponseMessageEncoder {
    private static final int RESPONSE_ALL_COMPONENTS_NUM = 2;

    private ResponseMessageEncoder() {
    }

    /**
     * Encode a response according to the provided parameters, in the format
     * specified above. It uses the POJOSerializer to serialized the object
     * given as parameter.
     *
     * @param code the status code of the response; please refer to StatusCode class
     * @param o object to serialize and attach as BODY
     * @return encoded response
     */
    public static String encode(StatusCode code, Object o) {
        String messageString = code.getCode()+"_";

        if (o!=null) {
            if (o instanceof String) {
                messageString += o;
            } else {
                messageString += POJOSerializer.serialize(o);
            }
        }

        return messageString;
    }

    public static String encode(StatusCode code) {
        return encode(code, null);
    }

    /**
     * Decode a response message from String to ResponseMessage.
     * Please refer to the ResponseMessage class for further details.
     *
     * @param message response message to be decoded
     * @return instance of ResponseMessage, representing the decoded response
     */
    public static ResponseMessage decode(String message) {
        ResponseMessage responseMessage = null;
        String[] splitMessage = message.split("_");

        if (splitMessage.length >= 1) {
            responseMessage = new ResponseMessage();
            responseMessage.setStatusCode(Integer.parseInt(splitMessage[0]));

            // Body not empty
            if (splitMessage.length == RESPONSE_ALL_COMPONENTS_NUM) {
                responseMessage.setSerializedObject(splitMessage[1]);
            }
        }

        return responseMessage;
    }
}
